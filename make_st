#! /bin/bash
# This script clones a "base" ServerTemplate and modifies it to use the scripts (cookbooks) in
# the current repo.
# In order to make RightScale API calls, the environment variable RS_KEY must be set to
# your RightScale API key, see the "API credentials" tab of the User Settings
# page of the RightScale dashboard.
# This script is still highly experimental and ill supported by the RightScale API, if you
# like it please vote for it :-)!

show_help() {
  cat <<EOT
Usage: ${0##*/} [-options...]
Update or clone a base ServerTemplate and repoint the cookbooks it uses to the current repo & branch
  -s st_name     the name of the ServerTemplate to update or clone
  -c             clone the ST (instead of updating its HEAD revision)
  -r rll_version update the version of RLL (not yet implemented)
  -h                    show this help
EOT
}

st_name=
clone=

while getopts "?hcs:r:" opt; do
  case "$opt" in
    h) show_help; exit 0 ;;
    s) st_name=$OPTARG ;;
    c) clone=1 ;;
    '?') show_help >&2; exit 1 ;;
  esac
done

# Shift off the options and optional --.
shift "$((OPTIND-1))"

if [[ -z "$RS_KEY" ]]; then
  echo "Please set RS_KEY to your RightScale API key from the dashboard's Settings>API credentials"
  exit 1
fi

if ! curl --version >/dev/null; then
  echo "ERROR: cannot find curl: it is required for this script, sorry"
  exit 1
fi

branch_name=$(git symbolic-ref -q HEAD)
branch_name=${branch_name##refs/heads/}
branch_name=${branch_name:-HEAD}
echo "Current branch: ${branch_name}"

RS_SERVER=${RS_SERVER:-us-3.rightscale.com}
echo -n "Authenticating with RightScale at ${RS_SERVER} ... "
json=`curl -sL -gG --retry 3 -X POST -H X-API-Version:1.5 \
  "https://${RS_SERVER}/api/oauth2?grant_type=refresh_token&refresh_token=${RS_KEY}"`
re='"access_token": *"([^"]*)"'
if [[ "$json" =~ $re ]]; then
  echo "successful"
  access_token="${BASH_REMATCH[1]}"
else
  echo "failed:"
  echo $json
  exit 1
fi

# ===== Find Cookbook Repository

RS_REPO_NAME=${RS_REPO_NAME:-`basename $PWD`_${branch_name}}

if [[ -z "$RS_REPO_ID" ]]; then
  # gotta figure out what the RightScale repo ID is for this baby
  echo -n "Finding repositories called '${RS_REPO_NAME}' ... "
  json=`curl -sL -gG --retry 3 -H X-API-Version:1.5 -H "Authorization: Bearer $access_token" \
    "https://${RS_SERVER}/api/repositories?filter[]=name==${RS_REPO_NAME}"`
  re='"id":"([0-9][0-9]*)"(.*)'
  repo_ids=()
  while [[ "$json" =~ $re ]]; do
    repo_ids=("${repo_ids[@]}" "${BASH_REMATCH[1]}")
    json="${BASH_REMATCH[2]}" # this is the rest of the json to find the next repo_id
  done
  if (("${#repo_ids[@]}" == 0)); then
    echo "ERROR"
    echo "No repo called '${RS_REPO_NAME}' found in the account,"
    exit 1
  elif (("${#repo_ids[@]}" > 1)); then
    echo "ERROR"
    echo "Found ${#repo_ids[@]} repos, please set RS_REPO_ID to the repo ID"
    exit 1
  fi
  RS_REPO_ID=${repo_ids[0]}
  echo "/api/repositories/${RS_REPO_ID}"
else
  echo "Using RS_REPO_ID=${RS_REPO_ID}"
fi

# ===== Find Server Template
# We locate the desired ServerTemplate based on the command line argument. The ST is required
# to create a server. It will provide boot scripts, operational scripts, decommissioning scripts,
# alert definitions to the existing instance. An empty ST with an MCI to launch the surrogate
# is the minimum required.

if [[ -z "$RS_BASE_ST_ID" ]]; then
  echo -n "Finding ServerTemplate '$st_name' ... "
  json=`curl -sL --retry 3 -H X-API-Version:1.5 -H "Authorization: Bearer $access_token" \
       "https://${RS_SERVER}/api/server_templates" \
       -gG --data-urlencode "filter[]=name==$st_name"`
  re='"rel":"self","href":"(/api/server_templates/[0-9]*)"'
  if [[ "$?" -ne 0 || ! "$json" =~ $re ]]; then
    echo "ERROR: Failed to find ServerTemplate."
    echo "JSON: $json"
    exit 1
  fi
  matches=`echo $json | grep -o $re | wc -l`
  if [[ "$matches" -gt 1 ]]; then
    echo "ERROR: Multiple ServerTemplates found. Please set RS_BASE_ST_ID and re-run"
    echo "$json"
    exit 1
  else
    st_href="${BASH_REMATCH[1]}"
  fi
  echo "$st_href"
else
  echo "Using RS_BASE_ST_ID=${RS_BASE_ST_ID}"
fi

if [[ -n "$clone" ]]; then
  echo -n "Cloning the ST as '${st_name} (${branch_name})' ..."
  resp=`curl -sL -gi --retry 3 -X POST -H X-API-Version:1.5 -H "Authorization: Bearer $access_token" \
    "https://${RS_SERVER}${st_href}/clone" \
    --data-urlencode "server_template[name]=${st_name} (${branch_name})"`
  re='Location: *(/api/server_templates/[0-9]*)'
  if [[ "$?" -ne 0 || ! "$resp" =~ 201\ Created || ! "$resp" =~ $re ]]; then
    echo "ERROR: Failed to clone ServerTemplate."
    echo "Exit code: $?"
    echo "Response: '$resp'"
    exit 1
  else
    st_href="${BASH_REMATCH[1]}"
    echo $st_href
  fi
fi

echo -n "Iterating through cookbook attachments to switch to ..."





