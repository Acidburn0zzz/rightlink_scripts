#! /bin/bash
# This script runs a recipe on the local server by asking the RS platform to
# schedule the execution. If passed the -f flag, it follows the audit entry and
# prints what is happening.

if ! curl --version >/dev/null; then
  echo "ERROR: cannot find curl: it is required for this script, sorry"
  exit 1
fi

if [[ -z "$RS_RLL_PORT" || -z "$RS_RLL_SECRET" ]]; then
  if ! . <(sudo cat /var/run/rll-secret); then
    echo "ERROR: cannot source /var/run/rll-secret to get access to the local proxy for RS API calls"
    exit 1
  fi
  if [[ -z "$RS_RLL_PORT" ]]; then echo "ERROR: RS_RLL_PORT not set"; exit 1; fi
  if [[ -z "$RS_RLL_SECRET" ]]; then echo "ERROR: RS_RLL_SECRET not set"; exit 1; fi
  #if [[ -z "$RS_SELF_HREF" ]]; then echo "ERROR: RS_SELF_HREF not set"; exit 1; fi
fi

# ===== Parse arguments

# Usage info
show_help() {
  cat <<EOT
Usage: ${0##*/} [-options...] [cookbook::]recipe
Run a recipe on the local server
  -f          follow the script execution and print the audit entry as it unfolds
  -h          show this help
EOT
}

follow=

while getopts "hf" opt; do
  case "$opt" in
    h) show_help; exit 0 ;;
    f) follow=1 ;;
    '?') show_help >&2; exit 1 ;;
  esac
done
shift "$((OPTIND-1))" # Shift off the options and optional --.

# ===== Parse cookbook::recipe

if [[ -z "$1" ]]; then
  echo "ERROR: cookbook::recipe name missing"
  show_help;
  exit 1
fi

re1='^[-a-zA-Z0-9_][-a-zA-Z0-9_]*::[-a-zA-Z0-9_][-a-zA-Z0-9_]*$'
re2='^[-a-zA-Z0-9_][-a-zA-Z0-9_]*$'
recipe=
if [[ "$1" =~ $re1 ]]; then 
  recipe=$1
elif [[ "$1" =~ $re2 ]]; then
  cook=`basename $PWD`
  recipe="$cook::$1"
  echo "Running '$recipe' (taking cookbook name from current directory)"
else
  echo "ERROR: recipe argument '$1' doesn't look like a cookbook::recipe name"
  exit 1
fi
t0=`date '+%s'`

# ===== Make a /rll/run/recipe call to the local RLL
curl -sS -gG -X POST -H X-RLL-Secret:$RS_RLL_SECRET \
  "http://127.0.0.1:$RS_RLL_PORT/rll/run/recipe" \
  --data-urlencode "recipe=$recipe"
echo "" # most responses don't include a newline
t1=$(( `date '+%s'` - $t0 ))
echo "********** TOOK ${t1} seconds"

exit 0

# ===== Start by creating an audit entry so we can track the recipe execution

echo -n "Creating an audit entry ... "
resp=`curl -isSL -gG --retry 3 -X POST -H X-RLL-Secret:$RS_RLL_SECRET \
  "http://127.0.0.1:$RS_RLL_PORT/api/audit_entries" \
  --data-urlencode "audit_entry[auditee_href]=$RS_SELF_HREF" \
  --data-urlencode "audit_entry[summary]=rs_run starting" \
  --data-urlencode "audit_entry[detail]=" \
  --data-urlencode "notify=Notification"`
re='Location: (/api/audit_entries/([0-9]*))'
if [[ "$resp" =~ $re ]]; then
  audit_href="${BASH_REMATCH[1]}"
  audit_id="${BASH_REMATCH[2]}"
  echo "$audit_href"
else
  echo "ERROR:"
  echo "$resp"
  exit 1
fi

# ===== Make the run_executable API call

t0=`date '+%s'`
echo -n "Requesting the execution of $recipe ... "
# I wish this worked...
#resp=`curl -sSL -gG --retry 3 -X POST -H X-RLL-Secret:$RS_RLL_SECRET \
#  "http://127.0.0.1:$RS_RLL_PORT$RS_SELF_HREF/run_executable" \
#  --data-urlencode "recipe_name=$recipe" \
#  --data-urlencode "audit_id=$audit_id"`
resp=`curl -sSL -gG --retry 3 -X POST -H X-RLL-Secret:$RS_RLL_SECRET \
  "http://127.0.0.1:$RS_RLL_PORT/api/right_net/scheduler/schedule_recipe" \
  --data-urlencode "recipe=$recipe" \
  --data-urlencode "audit_id=$audit_id"`
if [[ -n "$resp" ]]; then
  echo "ERROR: $resp"
  exit 1
else
  echo "ok"
fi

sleep 5

echo "Retrieving audit entry ... "
while true; do
  json=`curl -sSL -gG --retry 3 -X GET -H X-RLL-Secret:$RS_RLL_SECRET \
    "http://127.0.0.1:$RS_RLL_PORT$audit_href"`
  echo "$json"
  exit 0
  re='Summary</label><div>([^<]*)<'
  if [[ "$html" =~ $re ]]; then
    summary="${BASH_REMATCH[1]}"
    t1=$(( `date '+%s'` - $t0 ))
    echo "${t1}s Summary: ${summary}"
    if [[ "$summary" =~ completed: ]]; then break; fi
  else
    echo "Can't locate summary in response :-("
  fi
  sleep 5
done

re='<code><div[^>]*>(.*)</div></code>'
if [[ "$html" =~ $re ]]; then
  detail="${BASH_REMATCH[1]}"
  echo "===== DETAIL ====="
  echo -e "${detail}" | sed -e 's/&quot;/"/g'
  re='scraped revision ([0-9a-f]*)'
  if [[ "${detail}" =~ $re ]]; then
    rev="${BASH_REMATCH[1]}"
    if [[ "$rev" != "$sha" ]]; then
      echo "********** OOPS, the SHAs don't match:"
      echo "Latest local commit is ${sha}"
      echo "Scraped revision is    ${rev}"
      echo "Perhaps RS ignored the refetch request because a refetch"
      echo "was already running (but on an older commit)?"
    fi
  fi
else
  echo "===== DETAIL (sorry, raw html) ====="
  echo $html
fi
t1=$(( `date '+%s'` - $t0 ))
echo "===== TOOK ${t1} seconds ====="
