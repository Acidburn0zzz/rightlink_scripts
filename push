#! /bin/bash
# This script pushes this repository to the upstream git repo (e.g. github) and
# makes an API call to RightScale to referch and import the updated repo.
# In order to make the APi call, the environment variable KEy must be set to the
# user's RightScale API key, see the "API credentials" tab of the User Settings
# page of the RightScale dashboard
RS_ACCT=60073 # sorry for the hack...

if [[ -z "$RS_KEY" ]]; then
  echo "Please set RS_KEY to your RightScale API key from the dashboard's Settings>API credentials"
  exit 1
fi

if ! curl --version >/dev/null; then
  echo "ERROR: cannot find curl: it is required for this script, sorry"
  exit 1
fi

sha=`git rev-parse HEAD`
echo "Latest commit: ${sha}"

git push || exit 1

if [[ -e .pushrc ]]; then
  . .pushrc
fi

RS_SERVER=${RS_SERVER:-us-3.rightscale.com}
echo -n "Authenticating with RightScale at ${RS_SERVER} ... "
json=`curl -sL -gG --retry 3 -X POST -H X-API-Version:1.5 \
  "https://${RS_SERVER}/api/oauth2?grant_type=refresh_token&refresh_token=${RS_KEY}"`
re='"access_token": *"([^"]*)"'
if [[ "$json" =~ $re ]]; then
  echo "successful"
  access_token="${BASH_REMATCH[1]}"
else
  echo "failed:"
  echo $json
  exit 1
fi

RS_REPO_NAME=${RS_REPO_NAME:-`basename $PWD`}

if [[ -z "$RS_REPO_ID" ]]; then
  # gotta figure out what the RightScale repo ID is for this baby
  RS_REPO_NAME=${RS_REPO_NAME:-`basename $PWD`}
  echo -n "Finding repositories called '${RS_REPO_NAME}' ... "
  json=`curl -sL -gG --retry 3 -H X-API-Version:1.5 -H "Authorization: Bearer $access_token" \
    "https://${RS_SERVER}/api/repositories?filter[]=name==${RS_REPO_NAME}"`
  re='"id":"([0-9][0-9]*)"(.*)'
  repo_ids=()
  while [[ "$json" =~ $re ]]; do
    repo_ids=("${repo_ids[@]}" "${BASH_REMATCH[1]}")
    json="${BASH_REMATCH[2]}" # this is the rest of the json to find the next repo_id
  done
  if (("${#repo_ids[@]}" == 0)); then
    echo "ERROR"
    echo "No repo called '${RS_REPO_NAME}' found in the account,"
    echo "please set RS_REPO_NAME to the correct name, or set  RS_REPO_ID to the repo ID"
    exit 1
  elif (("${#repo_ids[@]}" > 1)); then
    echo "ERROR"
    echo "Found ${#repo_ids[@]} repos, please set RS_REPO_ID to the repo ID"
    exit 1
  fi
  RS_REPO_ID=${repo_ids[0]}
  echo "RS_REPO_ID=${RS_REPO_ID}"
else
  echo "Using RS_REPO_ID=${RS_REPO_ID}"
fi

if [[ ! -e .pushrc ]]; then
  echo "RS_SERVER=${RS_SERVER}"    >.pushrc
  echo "RS_REPO_ID=${RS_REPO_ID}" >>.pushrc
  echo "RS_REPO_NAME=${RS_REPO_NAME}" >>.pushrc
fi

echo -n "Asking for a repo refetch ... "
json=`curl -sL -gG --retry 3 -X POST -H X-API-Version:1.5 -H "Authorization: Bearer $access_token" \
  "https://${RS_SERVER}/api/repositories/${RS_REPO_ID}/refetch?auto_import=true"`
if [[ -n "$json" ]]; then
  echo "ERROR"
  echo $json
  exit 1
else
  echo "ok"
fi
t0=`date '+%s'`

# RightAPI 1.5 doesn't support audit entries on repositories: Gaaaaaah!
#start_date=`date '+%Y/%m/%d %H:%M:%S %z' -d '-5 min'`  # yup, that works...!
#end_date=`date '+%Y/%m/%d %H:%M:%S %z'`
#json=`curl -sL -gG --retry 3 -H X-API-Version:1.5 -H "Authorization: Bearer $access_token" \
#  "https://${RS_SERVER}/api/audit_entries" \
#  --data-urlencode "limit=100" \
#  --data-urlencode "start_date=$start_date" \
#  --data-urlencode "end_date=$end_date"`
## @!#$% the following doesn't work:
##  --data-urlencode "filter[]=auditee_href==/api/repositories/${RS_REPO_ID}" \
#echo $json
#re='"auditee","href":"([^"]*)"(.*)'
#auditees=()
#while [[ "$json" =~ $re ]]; do
#  auditees=("${auditees[@]}" "${BASH_REMATCH[1]}")
#  json="${BASH_REMATCH[2]}" # this is the rest of the json to find the next auditee
#done
#for a in ${auditees[@]}; do
#  echo $a
#done

echo -n "Looking for audit entry ..."
while true; do
  html=`curl -sL -gG --retry 3 -H X-Requested-With:XMLHttpRequest \
    -H "Authorization: Bearer $access_token" \
    "https://${RS_SERVER}/acct/${RS_ACCT}/audit_entries.json" \
    --data-urlencode "filter_sort_listing=true" \
    --data-urlencode "order_by=Timestamp DESC" \
    --data-urlencode "filter_type=Subject" \
    --data-urlencode "filter_value=${RS_REPO_NAME}" \
    --data-urlencode "selected_time_period=14d" \
    --data-urlencode "items_per_page=10"`
  #echo $html
  re="auditee_id=${RS_REPO_ID}[^']*audit_entries/([0-9]*)[^0-9>]*>(queued|[0-9][0-9]*%)"
  if [[ "$html" =~ $re ]]; then
    audit_id="${BASH_REMATCH[1]}"
    echo " audit_entry_id=${audit_id}"
    break
  else
    echo -n '.'
echo "=============================="
echo $html | egrep "'[^']*'"
    sleep 5
  fi
done
  
echo "Retrieving audit entry ... "
while true; do
  html=`curl -sL -gG --retry 3 -H X-Requested-With:XMLHttpRequest \
    -H "Authorization: Bearer $access_token" \
    "https://${RS_SERVER}/acct/60073/audit_entries/$audit_id"`
  re='Summary</label><div>([^<]*)<'
  if [[ "$html" =~ $re ]]; then
    summary="${BASH_REMATCH[1]}"
    t1=$(( `date '+%s'` - $t0 ))
    echo "${t1}s Summary: ${summary}"
    if [[ "$summary" =~ completed: ]]; then break; fi
  else
    echo "Can't locate summary in response :-("
  fi
  sleep 5
done

re='<code><div[^>]*>(.*)</div></code>'
if [[ "$html" =~ $re ]]; then
  detail="${BASH_REMATCH[1]}"
  echo "===== DETAIL ====="
  echo -e "${detail}" | sed -e 's/&quot;/"/g'
  re='scraped revision ([0-9a-f]*)'
  if [[ "${detail}" =~ $re ]]; then
    rev="${BASH_REMATCH[1]}"
    if [[ "$rev" != "$sha" ]]; then
      echo "********** OOPS, the SHAs don't match:"
      echo "Latest local commit is ${sha}"
      echo "Scraped revision is    ${rev}"
      echo "Perhaps RS ignored the refetch request because a refetch"
      echo "was already running (but on an older commit)?"
    fi
  fi
else
  echo "===== DETAIL (sorry, raw html) ====="
  echo $html
fi
t1=$(( `date '+%s'` - $t0 ))
echo "===== TOOK ${t1} seconds ====="
